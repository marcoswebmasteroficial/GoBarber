{"ast":null,"code":"var _jsxFileName = \"/home/marcos/Documentos/marcos/react/projetos/agendamento/web/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\n\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    registerField,\n    error\n  } = useField(name);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  const handleInputFocus = useCallback(() => setIsFocused(true), []);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  return /*#__PURE__*/React.createElement(Container, {\n    isFocused: isFocused,\n    isFilled: isFilled,\n    isErrored: !!error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    ref: inputRef,\n    defaultValue: defaultValue\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  })), error);\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/marcos/Documentos/marcos/react/projetos/agendamento/web/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","useField","Container","Input","name","icon","Icon","rest","inputRef","isFocused","setIsFocused","isFilled","setIsFilled","fieldName","defaultValue","registerField","error","ref","current","path","handleInputFocus","handleInputBlur","value"],"mappings":";AAAA,OAAOA,KAAP,IAEEC,SAFF,EAGEC,MAHF,EAIEC,QAJF,EAKEC,WALF,QAMO,OANP;AAQA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,UAA1B;;AAMA,MAAMC,KAA2B,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAI,EAAEC,IAAd;AAAoB,KAAGC;AAAvB,CAAD,KAAmC;AACrE,QAAMC,QAAQ,GAAGV,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAEc,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,aAA3B;AAA0CC,IAAAA;AAA1C,MAAoDf,QAAQ,CAACG,IAAD,CAAlE;AACAP,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,aAAa,CAAC;AACZX,MAAAA,IAAI,EAAES,SADM;AAEZI,MAAAA,GAAG,EAAET,QAAQ,CAACU,OAFF;AAGZC,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACN,SAAD,EAAYE,aAAZ,CANM,CAAT;AAOA,QAAMK,gBAAgB,GAAGpB,WAAW,CAAC,MAAMU,YAAY,CAAC,IAAD,CAAnB,EAA2B,EAA3B,CAApC;AACA,QAAMW,eAAe,GAAGrB,WAAW,CAAC,MAAM;AAAA;;AACxCU,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,IAAAA,WAAW,CAAC,CAAC,uBAACJ,QAAQ,CAACU,OAAV,sDAAC,kBAAkBI,KAAnB,CAAF,CAAX;AACD,GAHkC,EAGhC,EAHgC,CAAnC;AAIA,sBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEb,SAAtB;AAAiC,IAAA,QAAQ,EAAEE,QAA3C;AAAqD,IAAA,SAAS,EAAE,CAAC,CAACK,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADX,eAEE;AACE,IAAA,OAAO,EAAEc,gBADX;AAEE,IAAA,MAAM,EAAEC,eAFV;AAGE,IAAA,GAAG,EAAEb,QAHP;AAIE,IAAA,YAAY,EAAEM;AAJhB,KAKMP,IALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EASGS,KATH,CADF;AAaD,CA9BD;;AAgCA,eAAeb,KAAf","sourcesContent":["import React, {\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n} from 'react';\nimport { IconBaseProps } from 'react-icons';\nimport { useField } from '@unform/core';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { Container } from './styles';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\nconst Input: React.FC<InputProps> = ({ name, icon: Icon, ...rest }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const { fieldName, defaultValue, registerField, error } = useField(name);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  }, [fieldName, registerField]);\n  const handleInputFocus = useCallback(() => setIsFocused(true), []);\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n    setIsFilled(!!inputRef.current?.value);\n  }, []);\n  return (\n    <Container isFocused={isFocused} isFilled={isFilled} isErrored={!!error}>\n      {Icon && <Icon size={20} />}\n      <input\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        ref={inputRef}\n        defaultValue={defaultValue}\n        {...rest}\n      />\n      {error}\n    </Container>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}