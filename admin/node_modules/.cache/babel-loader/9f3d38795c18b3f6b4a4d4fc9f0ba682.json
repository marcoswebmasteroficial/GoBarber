{"ast":null,"code":"var _jsxFileName = \"/home/marcos/Documentos/marcos/react/projetos/agendamento/web/src/context/AuthContext.tsx\";\nimport React, { createContext, useCallback, useState, useContext } from 'react';\nimport api from '../services/api';\nconst AuthContext = createContext({});\n\nconst AuthProvider = ({\n  children\n}) => {\n  const [data, setData] = useState(() => {\n    const token = localStorage.getItem('@GoBarber:token');\n    const user = localStorage.getItem('@GoBarber:user');\n\n    if (token && user) {\n      api.defaults.headers.authorization = `Bearer ${token}`;\n      return {\n        token,\n        user: JSON.parse(user)\n      };\n    }\n\n    return {};\n  });\n  const signIn = useCallback(async ({\n    email,\n    password\n  }) => {\n    const response = await api.post('sessions', {\n      email,\n      password\n    });\n    const {\n      user,\n      token\n    } = response.data;\n    localStorage.setItem('@GoBarber:token', token);\n    localStorage.setItem('@GoBarber:user', JSON.stringify(user));\n    api.defaults.headers.authorization = `Bearer ${token}`;\n    setData({\n      user,\n      token\n    });\n  }, []);\n  const signOut = useCallback(() => {\n    localStorage.removeItem('@GoBarber:token');\n    localStorage.removeItem('@GoBarber:user');\n    setData({});\n  }, []);\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      user: data.user,\n      signIn\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nfunction useAuth() {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('ERROR!');\n  }\n\n  return context;\n}\n\nexport { AuthProvider, useAuth };","map":{"version":3,"sources":["/home/marcos/Documentos/marcos/react/projetos/agendamento/web/src/context/AuthContext.tsx"],"names":["React","createContext","useCallback","useState","useContext","api","AuthContext","AuthProvider","children","data","setData","token","localStorage","getItem","user","defaults","headers","authorization","JSON","parse","signIn","email","password","response","post","setItem","stringify","signOut","removeItem","useAuth","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,QAA5C,EAAsDC,UAAtD,QAAwE,OAAxE;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAoBA,MAAMC,WAAW,GAAGL,aAAa,CAAkB,EAAlB,CAAjC;;AAEA,MAAMM,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC/C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAY,MAAM;AAChD,UAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAd;AACA,UAAMC,IAAI,GAAGF,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAb;;AACA,QAAIF,KAAK,IAAIG,IAAb,EAAmB;AACjBT,MAAAA,GAAG,CAACU,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASN,KAAM,EAArD;AACA,aAAO;AAAEA,QAAAA,KAAF;AAASG,QAAAA,IAAI,EAAEI,IAAI,CAACC,KAAL,CAAWL,IAAX;AAAf,OAAP;AACD;;AACD,WAAO,EAAP;AACD,GAR+B,CAAhC;AASA,QAAMM,MAAM,GAAGlB,WAAW,CAAC,OAAO;AAAEmB,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP,KAA+B;AACxD,UAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,IAAJ,CAAS,UAAT,EAAqB;AAC1CH,MAAAA,KAD0C;AAE1CC,MAAAA;AAF0C,KAArB,CAAvB;AAKA,UAAM;AAAER,MAAAA,IAAF;AAAQH,MAAAA;AAAR,QAAkBY,QAAQ,CAACd,IAAjC;AAEAG,IAAAA,YAAY,CAACa,OAAb,CAAqB,iBAArB,EAAwCd,KAAxC;AACAC,IAAAA,YAAY,CAACa,OAAb,CAAqB,gBAArB,EAAuCP,IAAI,CAACQ,SAAL,CAAeZ,IAAf,CAAvC;AAEAT,IAAAA,GAAG,CAACU,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASN,KAAM,EAArD;AAEAD,IAAAA,OAAO,CAAC;AACNI,MAAAA,IADM;AAENH,MAAAA;AAFM,KAAD,CAAP;AAID,GAjByB,EAiBvB,EAjBuB,CAA1B;AAkBA,QAAMgB,OAAO,GAAGzB,WAAW,CAAC,MAAM;AAChCU,IAAAA,YAAY,CAACgB,UAAb,CAAwB,iBAAxB;AACAhB,IAAAA,YAAY,CAACgB,UAAb,CAAwB,gBAAxB;AAEAlB,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GAL0B,EAKxB,EALwB,CAA3B;AAMA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEI,MAAAA,IAAI,EAAEL,IAAI,CAACK,IAAb;AAAmBM,MAAAA;AAAnB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,QADH,CADF;AAKD,CAvCD;;AAwCA,SAASqB,OAAT,GAAoC;AAClC,QAAMC,OAAO,GAAG1B,UAAU,CAACE,WAAD,CAA1B;;AACA,MAAI,CAACwB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,QAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD;;AACD,SAASvB,YAAT,EAAuBsB,OAAvB","sourcesContent":["import React, { createContext, useCallback, useState, useContext } from 'react';\nimport api from '../services/api';\n\ninterface User {\n  id: string;\n  avatar_url: string;\n  name: string;\n  email: string;\n}\ninterface SignInCredencials {\n  email: string;\n  password: string;\n}\ninterface AuthState {\n  user: User;\n  token: string;\n}\ninterface AuthContextData {\n  user: User;\n  signIn(credencials: SignInCredencials): Promise<void>;\n}\nconst AuthContext = createContext<AuthContextData>({} as AuthContextData);\n\nconst AuthProvider: React.FC = ({ children }) => {\n  const [data, setData] = useState<AuthState>(() => {\n    const token = localStorage.getItem('@GoBarber:token');\n    const user = localStorage.getItem('@GoBarber:user');\n    if (token && user) {\n      api.defaults.headers.authorization = `Bearer ${token}`;\n      return { token, user: JSON.parse(user) };\n    }\n    return {} as AuthState;\n  });\n  const signIn = useCallback(async ({ email, password }) => {\n    const response = await api.post('sessions', {\n      email,\n      password,\n    });\n\n    const { user, token } = response.data;\n\n    localStorage.setItem('@GoBarber:token', token);\n    localStorage.setItem('@GoBarber:user', JSON.stringify(user));\n\n    api.defaults.headers.authorization = `Bearer ${token}`;\n\n    setData({\n      user,\n      token,\n    });\n  }, []);\n  const signOut = useCallback(() => {\n    localStorage.removeItem('@GoBarber:token');\n    localStorage.removeItem('@GoBarber:user');\n\n    setData({} as AuthState);\n  }, []);\n  return (\n    <AuthContext.Provider value={{ user: data.user, signIn }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\nfunction useAuth(): AuthContextData {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('ERROR!');\n  }\n  return context;\n}\nexport { AuthProvider, useAuth };\n"]},"metadata":{},"sourceType":"module"}