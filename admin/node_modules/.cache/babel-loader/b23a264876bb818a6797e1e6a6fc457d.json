{"ast":null,"code":"var _jsxFileName = \"/home/marcos/Documentos/marcos/react/projetos/agendamento/web/src/hooks/toast.tsx\";\nimport React, { createContext, useContext, useCallback, useState } from 'react';\nimport { uuid } from 'uuidv4';\nimport ToastContainer from '../components/ToastContainer';\nconst ToastContext = createContext({});\n\nconst ToastProvider = ({\n  children\n}) => {\n  const [messagens, setMessages] = useState([]);\n  const addToast = useCallback(({\n    type,\n    title,\n    description\n  }) => {\n    const id = uuid();\n    const toast = {\n      id,\n      type,\n      title,\n      description\n    };\n    setMessages(item => [...item, toast]);\n  }, []);\n  const removeToast = useCallback(id => {\n    setMessages(item => item.filter(message => message.id !== id));\n  }, []);\n  return /*#__PURE__*/React.createElement(ToastContext.Provider, {\n    value: {\n      addToast,\n      removeToast\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ToastContainer, {\n    messages: messagens,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), children);\n};\n\nfunction useToast() {\n  const context = useContext(ToastContext);\n\n  if (!context) {\n    throw new Error('ERROR! ToastContext');\n  }\n\n  return context;\n}\n\nexport { ToastProvider, useToast };","map":{"version":3,"sources":["/home/marcos/Documentos/marcos/react/projetos/agendamento/web/src/hooks/toast.tsx"],"names":["React","createContext","useContext","useCallback","useState","uuid","ToastContainer","ToastContext","ToastProvider","children","messagens","setMessages","addToast","type","title","description","id","toast","item","removeToast","filter","message","useToast","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,WAA3C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAYA,MAAMC,YAAY,GAAGN,aAAa,CAAmB,EAAnB,CAAlC;;AAEA,MAAMO,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAChD,QAAM,CAACC,SAAD,EAAYC,WAAZ,IAA2BP,QAAQ,CAAiB,EAAjB,CAAzC;AACA,QAAMQ,QAAQ,GAAGT,WAAW,CAC1B,CAAC;AAAEU,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAD,KAA4D;AAC1D,UAAMC,EAAE,GAAGX,IAAI,EAAf;AACA,UAAMY,KAAK,GAAG;AACZD,MAAAA,EADY;AAEZH,MAAAA,IAFY;AAGZC,MAAAA,KAHY;AAIZC,MAAAA;AAJY,KAAd;AAMAJ,IAAAA,WAAW,CAACO,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAUD,KAAV,CAAT,CAAX;AACD,GAVyB,EAW1B,EAX0B,CAA5B;AAaA,QAAME,WAAW,GAAGhB,WAAW,CAAEa,EAAD,IAAgB;AAC9CL,IAAAA,WAAW,CAACO,IAAI,IAAIA,IAAI,CAACE,MAAL,CAAYC,OAAO,IAAIA,OAAO,CAACL,EAAR,KAAeA,EAAtC,CAAT,CAAX;AACD,GAF8B,EAE5B,EAF4B,CAA/B;AAIA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,QAAF;AAAYO,MAAAA;AAAZ,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAET,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGD,QAFH,CADF;AAMD,CAzBD;;AA2BA,SAASa,QAAT,GAAsC;AACpC,QAAMC,OAAO,GAAGrB,UAAU,CAACK,YAAD,CAA1B;;AACA,MAAI,CAACgB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD;;AAED,SAASf,aAAT,EAAwBc,QAAxB","sourcesContent":["import React, { createContext, useContext, useCallback, useState } from 'react';\nimport { uuid } from 'uuidv4';\nimport ToastContainer from '../components/ToastContainer';\n\nexport interface ToastMessage {\n  id: string;\n  type?: 'success' | 'error' | 'info';\n  title: string;\n  description?: string;\n}\ninterface ToastContextData {\n  addToast(message: Omit<ToastMessage, 'id'>): void;\n  removeToast(): void;\n}\nconst ToastContext = createContext<ToastContextData>({} as ToastContextData);\n\nconst ToastProvider: React.FC = ({ children }) => {\n  const [messagens, setMessages] = useState<ToastMessage[]>([]);\n  const addToast = useCallback(\n    ({ type, title, description }: Omit<ToastMessage, 'id'>) => {\n      const id = uuid();\n      const toast = {\n        id,\n        type,\n        title,\n        description,\n      };\n      setMessages(item => [...item, toast]);\n    },\n    [],\n  );\n  const removeToast = useCallback((id: string) => {\n    setMessages(item => item.filter(message => message.id !== id));\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ addToast, removeToast }}>\n      <ToastContainer messages={messagens} />\n      {children}\n    </ToastContext.Provider>\n  );\n};\n\nfunction useToast(): ToastContextData {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('ERROR! ToastContext');\n  }\n  return context;\n}\n\nexport { ToastProvider, useToast };\n"]},"metadata":{},"sourceType":"module"}